
 /* STATES / HELPERS */
 /* -------------------------------------- */

@mixin clearfix{
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin column-base{
	float: left;
	display: block;
}

@mixin centered($width: null) {
	width: $width;
	margin-left: auto;
	margin-right: auto;
	display: block;
}

%full-width {
	display: block;
	float: none;
	width: 100%;
}

@mixin group(){
	@include clearfix;
	display: block;
	width: 100%;
}


/* GRID */
/* -------------------------------------- */

@function col-width( $cols, $total: $default-total-cols, $gutter: $default-gutter ){
	$remaining-width: 100% - ($total - 1) * $gutter;
	$absorbed: ($cols - 1) * $gutter;
	$col-width: $remaining-width / $total * $cols + $absorbed;

	@return $col-width;
}

@mixin column( $cols, $total: $default-total-cols, $gutter: $default-gutter ) {
	@include column-base;
    width: col-width( $cols, $total, $gutter );

    & + [class*="col-"]{
    	margin-left: $gutter;
    }
}

@mixin responsive-column( $breakpoint, $cols, $total: $default-total-cols, $gutter: $default-gutter ){
	@extend %full-width;

	@include bp-min($breakpoint){
		@include column( $cols, $total, $gutter );
	}
}


@mixin render-columns( $pre: 'col', $bp-array: $grid-bp-array ){
	@for $i from 1 through $default-total-cols {
		.#{$pre}-#{$i}{
			@include column( $cols: $i );
		}

		@each $id in map-keys($grid-bp-array){
			.#{$pre}-#{$id}-#{$i} {
				@include responsive-column( map-get($grid-bp-array, $id), $i);
			}
		}
	}
}


/* STYLES */
/* -------------------------------------- */

.container {
	margin: 0 auto;
	width: $container-width;
	@include clearfix;

	@include bp-min($desktop){
		width: $content-width;
	}
}

.row,
.group {
	@include group;
}

@include render-columns();




