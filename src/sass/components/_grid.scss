// MIXINS

@mixin clearfix{
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin column-base{
	float: left;
	display: block;
}

@mixin centered($width: null) {
	width: $width;
	margin-left: auto;
	margin-right: auto;
	display: block;
	float: none !important;
}

%full-width {
	display: block;
	float: none;
	width: 100%;
}

@mixin group(){
	@include clearfix;
	display: block;
	width: 100%;
}


/* FLOAT GRID */
/* -------------------------------------- */

@function col-width( $cols, $total: $default-total-cols, $gutter: $default-gutter ){
	$remaining-width: 100% - ($total - 1) * $gutter;
	$absorbed: ($cols - 1) * $gutter;
	$col-width: $remaining-width / $total * $cols + $absorbed;

	@return $col-width;
}

@mixin column( $cols, $total: $default-total-cols, $gutter: $default-gutter ) {
	@include column-base;
    width: col-width( $cols, $total, $gutter );

    & + [class*="col-"]{
    	margin-left: $gutter;
    }
}

@mixin col-push( $cols, $total: $default-total-cols, $gutter: $default-gutter ) {
	margin-left: col-width( $cols, $total, $gutter ) + $gutter;
}

@mixin responsive-column( $breakpoint, $cols, $total: $default-total-cols, $gutter: $default-gutter ){
	@extend %full-width;

	@include bp-min($breakpoint){
		@include column( $cols, $total, $gutter );
	}
}


@mixin render-columns( $pre: 'col', $bp-array: $grid-bp-array ){
	@for $i from 1 through $default-total-cols {
		.#{$pre}-#{$i}{
			@include column( $cols: $i );
		}

		@each $id in map-keys($grid-bp-array){
			.#{$pre}-#{$id}-#{$i} {
				@include responsive-column( map-get($grid-bp-array, $id), $i);
			}
		}
	}
}


/* FLEX GRID */
/* -------------------------------------- */

@mixin flex-group($direction: row){
	display: flex;
	flex-direction: $direction;
}

@function flex-width( $cols, $total: $default-total-cols, $gutter: $default-gutter ){
	$col-width: col-width( $cols, $total, $gutter );

	@return $col-width;
}

@mixin flex-column( $cols, $total: $default-total-cols, $gutter: $default-gutter, $pre: "flex" ){
	width: flex-width($cols, $total, $gutter);

	& + [class*=#{$pre}]{
		margin-left: $gutter;
	}

}

@mixin responsive-flex-column( $breakpoint, $cols, $total: $default-total-cols ){
	width: 100%;

	@include bp-min($breakpoint){
		@include flex-column( $cols, $total );
	}
}

@mixin responsive-flex-group( $breakpoint: null ){
	@include bp-min($breakpoint){
		@include flex-group();
	}
}

@mixin render-flex-cols( $pre: 'flex', $bp-array: $grid-bp-array ){
	@for $i from 1 through $default-total-cols {
		.#{$pre}-#{$i}{
			@include flex-column( $cols: $i );
		}

		@each $id in map-keys($bp-array){
			.#{$pre}-#{$id}-#{$i} {
				@include responsive-flex-column( map-get($bp-array, $id), $i);
			}
		}
	}

	@each $id in map-keys($bp-array){
		.#{$pre}-group-#{$id} {
			@include responsive-flex-group( map-get($grid-bp-array, $id) );
		}
	}
}

@mixin grid-item($target, $total){
	$row: $total / $target;
	$repeat: "#{$row}n+1";

	@include column($target, $total);

	& + .grid-item {
		margin-left: $default-gutter;
	}

	&:nth-of-type(#{$repeat}){
		margin-left: 0;
	}
}



/* STYLES */
/* -------------------------------------- */

.container {
	margin: 0 auto;
	width: $container-width;
	@include clearfix;

	@include bp-min($desktop){
		width: $content-width;
	}
}

.row,
.group {
	@include group;
}

.flex-group {
	@include flex-group;
}

.flex-row-center {
	align-items: center;
}

.centered {
	@include centered();
}

.clearfix {
	@include clearfix;
}

.grid-3-up {
	.grid-item {
		@include bp-between($mobile, $medium-screen){
			@include grid-item(6,12);
		}
		@include bp-min($medium-screen){
			@include grid-item(4,12);
		}
	}
}

@include render-columns();
@include render-flex-cols();




